{"version":3,"file":"static/js/736.265b34a7.chunk.js","mappings":"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","sources":["components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx","components/Styled/Subtitle.styled.jsx","hooks/useFetch.js","services/movies.service.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const CastStyled = styled.ul`\n  display: flex;\n  gap: 20px;\n  flex-wrap: wrap;\n  margin-top: 30px;\n\n  & li {\n    width: calc((100% - 20px * 7) / 8);\n    padding: 5px;\n    border-radius: 5px;\n    box-shadow: 0px 0px 15px 0px rgba(0, 0, 0, 0.4);\n\n    @media screen and (max-width: 1280px) {\n      width: calc((100% - 20px * 6) / 7);\n    }\n\n    @media screen and (max-width: 1100px) {\n      width: calc((100% - 20px * 5) / 6);\n    }\n\n    @media screen and (max-width: 900px) {\n      width: calc((100% - 20px * 4) / 5);\n    }\n\n    @media screen and (max-width: 700px) {\n      width: calc((100% - 20px * 3) / 4);\n    }\n\n    @media screen and (max-width: 500px) {\n      width: calc((100% - 20px * 2) / 3);\n    }\n\n    @media screen and (max-width: 400px) {\n      width: 100%;\n    }\n\n    & img {\n      border-radius: 3px;\n      margin-bottom: 10px;\n      display: block;\n    }\n\n    & .title {\n      color: #fff;\n      margin-bottom: 10px;\n      padding: 0 5px;\n    }\n\n    & .subtitle {\n      color: #ffffff9a;\n      padding: 0 5px;\n      font-size: 14px;\n      margin-bottom: 5px;\n    }\n  }\n`;\n","import { useCallback } from 'react';\nimport { CastStyled } from './Cast.styled';\nimport { useFetch } from './../../hooks/useFetch';\nimport { useParams } from 'react-router-dom';\nimport { getCast } from 'services';\nimport { SubtitleStyled } from './../Styled/Subtitle.styled';\nimport { fetchStatus } from './../../constants/fetch.status';\nimport { Loader } from 'components/Styled';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n\n  const getMovieCast = useCallback(async () => {\n    return await getCast({ movieId });\n  }, [movieId]);\n\n  const { data, status } = useFetch(getMovieCast);\n\n  console.log(data);\n\n  return (\n    <>\n      {data && data.cast && data.cast.length !== 0 && (\n        <>\n          <CastStyled>\n            {data.cast.map(\n              ({ id, character, original_name, profile_path }, index) =>\n                profile_path && (\n                  <li key={index}>\n                    <img\n                      src={`https://image.tmdb.org/t/p/w500${profile_path}`}\n                      alt={character}\n                    />\n                    <div className=\"title\">{character}</div>\n                    <div className=\"subtitle\">{original_name}</div>\n                  </li>\n                )\n            )}\n          </CastStyled>\n        </>\n      )}\n      {data && data.crew && data.crew.length !== 0 && (\n        <>\n          <SubtitleStyled>Crew</SubtitleStyled>\n          <CastStyled>\n            {data.crew.map(\n              ({ id, job, original_name, profile_path }, index) =>\n                profile_path && (\n                  <li key={index}>\n                    <img\n                      src={`https://image.tmdb.org/t/p/w500${profile_path}`}\n                      alt={original_name}\n                    />\n                    <div className=\"title\">{job}</div>\n                    <div className=\"subtitle\">{original_name}</div>\n                  </li>\n                )\n            )}\n          </CastStyled>\n        </>\n      )}\n\n      {status === fetchStatus.LOADING && <Loader className=\"pending\" />}\n    </>\n  );\n};\n\nexport default Cast;\n","import styled from '@emotion/styled';\nimport { colors } from 'constants';\n\nexport const SubtitleStyled = styled.div`\n  color: ${colors.color1};\n  font-size: 20px;\n  margin: 30px 0 30px 0;\n`;\n","import { fetchStatus } from 'constants';\nimport { useEffect, useState } from 'react';\nimport { toast } from 'react-toastify';\n\nexport const useFetch = (callback, isInitialRequest) => {\n  const [data, setData] = useState({});\n  const [status, setStatus] = useState(fetchStatus.IDLE);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      setStatus(fetchStatus.LOADING);\n      try {\n        const data = await callback();\n        setData(data);\n        setStatus(fetchStatus.SUCCESS);\n      } catch (error) {\n        toast.error(error.message);\n        setStatus(fetchStatus.ERROR);\n      }\n    };\n\n    fetchData();\n  }, [callback, isInitialRequest]);\n\n  return { data, status };\n};\n\nexport const useFetchPages = (callback, isInitialRequest) => {\n  const [data, setData] = useState({});\n  const [status, setStatus] = useState(fetchStatus.IDLE);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      setStatus(fetchStatus.LOADING);\n      try {\n        const data = await callback();\n        console.log(data);\n        setData(prev =>\n          isInitialRequest\n            ? data\n            : { ...prev, results: [...prev.results, ...data.results] }\n        );\n        if (\n          data.results !== undefined &&\n          data.results.length !== 0 &&\n          data.page === 1\n        ) {\n          // toast.success(`We found ${data.total} movies`);\n        }\n        setStatus(fetchStatus.SUCCESS);\n      } catch (error) {\n        toast.error(error.message);\n        setStatus(fetchStatus.ERROR);\n      }\n    };\n\n    fetchData();\n  }, [callback, isInitialRequest]);\n\n  return { data, status };\n};\n","import axios from 'axios';\nimport { theMovieDBApiKey } from 'constants';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\naxios.defaults.params = {\n  api_key: theMovieDBApiKey,\n};\n\nexport const findMoviesByQuery = async ({ query, page }) => {\n  console.log(query);\n  const { data } = await axios.get('search/movie', {\n    params: {\n      query,\n      page,\n    },\n  });\n\n  const { results, total_pages: totalPages, total_results: total } = data;\n  const reachedEnd = totalPages === page;\n\n  console.log('page: ', page);\n  console.log('totalPages: ', totalPages);\n  console.log('reachedEnd: ', reachedEnd);\n\n  return { results, totalPages, total, reachedEnd, page };\n};\n\nexport const getTrandingMovies = async ({ page, filter }) => {\n  const { data } = await axios.get(`trending/movie/${filter}`, {\n    params: {\n      page,\n    },\n  });\n\n  const { results, total_pages: totalPages, total_results: total } = data;\n  const reachedEnd = totalPages === page;\n\n  return { results, totalPages, total, reachedEnd, page };\n};\n\nexport const getMovieDetailsById = async ({ movieId }) => {\n  const { data } = await axios.get(`movie/${movieId}`, {\n    params: {\n      language: 'en-US',\n    },\n  });\n\n  return data;\n};\n\nexport const getCast = async ({ movieId }) => {\n  const { data } = await axios.get(`movie/${movieId}/credits`, {\n    params: {\n      language: 'en-US',\n    },\n  });\n\n  console.log(data);\n\n  return data;\n};\n\nexport const getReviews = async ({ movieId, page }) => {\n  const { data } = await axios.get(`movie/${movieId}/reviews`, {\n    params: {\n      language: 'en-US',\n      page,\n    },\n  });\n\n  const { results, total_pages: totalPages, total_results: total } = data;\n  const reachedEnd = totalPages === page;\n\n  return { results, totalPages, total, reachedEnd, page };\n};\n"],"names":["CastStyled","styled","movieId","useParams","getMovieCast","useCallback","getCast","useFetch","data","status","console","log","cast","length","map","index","id","character","original_name","profile_path","src","alt","className","crew","job","fetchStatus","SubtitleStyled","colors","callback","isInitialRequest","useState","setData","setStatus","useEffect","fetchData","toast","message","useFetchPages","prev","results","undefined","page","axios","api_key","theMovieDBApiKey","findMoviesByQuery","query","params","totalPages","total_pages","total","total_results","reachedEnd","getTrandingMovies","filter","getMovieDetailsById","language","getReviews"],"sourceRoot":""}